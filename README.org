This repo contains my personal configuration of the [[http://spacemacs.org/][Spacemacs]] distribution of
Emacs.

* Installation

* User configuration
** Top-level user configuration

#+BEGIN_SRC emacs-lisp :noweb tangle :tangle user-config.el
<<Frame-appearance>>

<<Key-bindings>>

<<Miscellaneous>>

<<Individual-packages>>

#+END_SRC

** Frame appearance

#+BEGIN_SRC emacs-lisp :noweb-ref Frame-appearance
;; ---- Frame appearance

#+END_SRC

This section used to set variables that affected frame appearance. When I moved
to the develop branch of Spacemacs, these variables had been replaced by
Spacemacs specific ones that were set in the .spacemacs.

** Key bindings

#+BEGIN_SRC emacs-lisp :noweb-ref Key-bindings
;; ---- Key bindings

#+END_SRC

The function next-error allows one to sequentially visit the errors listed in a
compilation buffer or the matches in a grep buffer (and more). In Emacs, the key
binding is C-x `. This is cumbersome binding, even more so if you have a
keyboard with dead keys. We rebind it as follows:
#+BEGIN_SRC emacs-lisp :noweb-ref Key-bindings
(global-set-key [f4]       'next-error)
#+END_SRC
Note that in Spacemacs, the keybinding is SPC-e-n.

Spacemacs lets the TAB key indent the current line, or if the line is already
indented, complete the thing at point. So if point is at an empty line that you
want to re-indent, TAB pops up an unwanted menu of completion options. This is
annoying for modes where the automatic indent is often incorrect, for example
elm-mode. As I never use TAB to get a completion menu, I let TAB only indent:
#+BEGIN_SRC emacs-lisp :noweb-ref Key-bindings
(setq tab-always-indent t)
#+END_SRC

** Miscellaneous

#+BEGIN_SRC emacs-lisp :noweb-ref Miscellaneous
;; ---- Miscellaneous

#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref Miscellaneous
;; enable word wrap
(add-hook 'text-mode-hook 'turn-on-auto-fill)

#+END_SRC

For some reason the buffer list is ordered by the length of the buffer name once
the user has entered a pattern. It allows for much more comfortable buffer
switching if we maintain the standard most-recently-used ordering:
#+BEGIN_SRC emacs-lisp :noweb-ref Miscellaneous
(defun sks-buffers-nosort-transformer (_ candidates _)
  candidates)

(advice-add 'helm-buffers-sort-transformer :around 'sks-buffers-nosort-transformer)
#+END_SRC
This solution comes from [[https://github.com/emacs-helm/helm/issues/1492#issuecomment-216520302][this comment]] on GitHub issue [[https://github.com/emacs-helm/helm/issues/1492][emacs-helm/helm #1492]] "Can
I define sorting order when narrowing down buffers list?".

** Individual packages

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
;; ---- Individual-packages

#+END_SRC

*** Elm

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
;; -------- elm-mode

#+END_SRC

Format the current Elm buffer on save.
#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
(with-eval-after-load 'elm-format
    (setq elm-format-on-save t))

#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
;; -------- org-mode

#+END_SRC

We allow the evaluation of Python source code blocks in Org buffers:
#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
(with-eval-after-load 'org
  (require 'ob-python)
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t))))

#+END_SRC

*** org-journal

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
;; -------- org-journal

#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
(setq system-time-locale "en_US.UTF-8")

(with-eval-after-load 'org-journal
  (custom-set-variables '(org-journal-dir "~/repos/bitbucket.org/journal/"))
  (custom-set-variables '(org-journal-file-format "%Y%m%d.org"))
  (setq org-journal-date-format "%F, %A")

  (add-to-list 'org-agenda-files org-journal-dir)

  (setq org-journal-time-format "")

  (defun add-time-as-orgmode-property()
    (progn
      (org-insert-property-drawer)
      (org-entry-put (point) "Time" (format-time-string "%H:%M"))
      (re-search-backward "^*")
      (end-of-line)
      )
    )
  (add-hook 'org-journal-after-entry-create-hook 'add-time-as-orgmode-property)
)

#+END_SRC

We use package [[https://github.com/swinkels/oje][oje]] to export our org-journal to [[https://getnikola.com/][Nikola]], the static site generator:
#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
(load "~/repos/github.com/oje/oje.el")

#+END_SRC
*** Terminals

#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
;; -------- terminals

#+END_SRC

When you open a shell, it starts in Evil insert mode. In this mode C-r does not
work, which is the binding to find a command in your command history. I also
noticed that sometimes, the command shown is not (exactly) the command that will
be executed. Therefore I start shells in Emacs mode.
#+BEGIN_SRC emacs-lisp :noweb-ref Individual-packages
(evil-set-initial-state 'term-mode 'emacs)

#+END_SRC

* Custom scripts

I wrote two Bash shell scripts that use Emacs in the current terminal. The first
script just starts Emacs:
#+BEGIN_SRC sh :noweb tangle :tangle emacs-nw :tangle-mode (identity #o764)
#!/bin/bash
env TERM=xterm-256color emacsclient -nw -a "" "$@"
#+END_SRC

The following remarks are in order:
1. The script starts emacsclient in the terminal, through =-nw=, and instructs
   the client to start the Emacs daemon if none is running yet, through =-a ""=.
2. Any parameters passed to the client are passed to the client, through ="$@"=.
3. The script sets the TERM variable so Emacs knows it can use 256 colors: this
   lets Spacemacs look fine in a terminal.

The first step allows me to speed-up the Emacs startup time in the terminal,
where I expect to use Emacs only for quick edits.

I had to disable the start of the Emacs daemon by the graphical version of
Emacs. I had to do this so the graphical version could run side-by-side with the
terminal version. In general I only run one instance of the graphical version,
so this is not a real limitation.

One thing I still have to do is make sure that only the graphical version of
Emacs modifies the list of recent files.

The second script starts Emacs and starts magit for the current directory:
#+BEGIN_SRC sh :noweb tangle :tangle magit :tangle-mode (identity #o764)
#!/bin/bash

function show_usage {
    echo "Usage: magit [OPTION]"
    echo "Start a terminal Emacs session with magit for the Git repo in the current directory"
    echo ""
    echo "  -h, --help  give this help list"
}

if [ "$1" == "" ]; then
    git status > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        working_dir=$(pwd)
        env TERM=xterm-256color emacsclient -nw -a "" --eval "(magit-status-internal \"${working_dir}/.\")"
    else
        echo "The current directory is not a Git repo"
        exit 1
    fi
elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_usage
    exit 0
else
    show_usage
    exit 1
fi
#+END_SRC

Initially I called =magit-status= when the current directory was not a Git repo.
This would start Helm so the user could select a Git directory. Unfortunately it
turned out that when the user would aborted this selection, e.g. by =C-g=, and
close the client, the display of characters in the terminal was corrupted.
